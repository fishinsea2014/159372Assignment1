
>>> import numpy as np
import>>> import pylab as pl
>>> 
>>> a = 2*np.ones((6,4))
>>> b = np.ones((6,4)) + 2*np.eye(6,4) # Note the irritating lack of symmetry between the brackets
>>> a
array([[ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.]])
>>> b
array([[ 3.,  1.,  1.,  1.],
       [ 1.,  3.,  1.,  1.],
       [ 1.,  1.,  3.,  1.],
       [ 1.,  1.,  1.,  3.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])
>>> a*b
array([[ 6.,  2.,  2.,  2.],
       [ 2.,  6.,  2.,  2.],
       [ 2.,  2.,  6.,  2.],
       [ 2.,  2.,  2.,  6.],
       [ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.]])
>>> np.dot(a,b) # This is matrix multiplication, so the size of the matrices should be M*N and N*P
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: matrices are not aligned
>>> np.dot(a.transpose(),b)
array([[ 16.,  16.,  16.,  16.],
       [ 16.,  16.,  16.,  16.],
       [ 16.,  16.,  16.,  16.],
       [ 16.,  16.,  16.,  16.]])
>>> np.dot(a,b.transpose()) # The result is M*P
array([[ 12.,  12.,  12.,  12.,   8.,   8.],
       [ 12.,  12.,  12.,  12.,   8.,   8.],
       [ 12.,  12.,  12.,  12.,   8.,   8.],
       [ 12.,  12.,  12.,  12.,   8.,   8.],
       [ 12.,  12.,  12.,  12.,   8.,   8.],
       [ 12.,  12.,  12.,  12.,   8.,   8.]])

>>> def makearrays():
...     x = np.random.rand(3,4)
...     y = np.random.randn(5,6) # These are normally distributed random numbers
...     print np.sum(x)
...     print np.mean(y,axis=1)
...     print np.sum(y,axis=0)
...     print np.mean(x)
... 
>>> makearrays()
4.92612722026
[-0.32455381 -0.56754754 -0.11224118 -0.7239442   0.6750067 ]
[-3.20652096  3.05970124 -0.25785479 -3.56591405 -3.42370113  1.07460951]
0.410510601688

>>> def countones(mat):
...     count = 0
...     for i in range(np.shape(mat)[0]):
...             for j in range(np.shape(mat)[1]):
...                     if mat[i][j] == 1:
...                             count = count+1
...     print count
... 
>>> countones(b)
20
>>> b
array([[ 3.,  1.,  1.,  1.],
       [ 1.,  3.,  1.,  1.],
       [ 1.,  1.,  3.,  1.],
       [ 1.,  1.,  1.,  3.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])
>>> countones(np.ones((2,2)))
4


>>> print np.shape(np.where(b==1))[1]
20



>>> iris = np.loadtxt('iris_proc.data',delimiter=',')
>>> i0 = np.where(iris[:,4]==0)
>>> i1 = np.where(iris[:,4]==1)
>>> i2 = np.where(iris[:,4]==2)

>>> i0 = np.where(iris[:,4]==0)
>>> pl.plot(iris[i0,0],iris[i0,1],'ro')
>>> pl.plot(iris[i1,0],iris[i1,1],'g+')
>>> pl.plot(iris[i2,0],iris[i2,1],'b^')
>>> iris = iris - np.mean(iris,axis=0)
>>> iris = iris/np.std(iris,axis=0)

Columns 2 and 3 seem helpful. Subtracting the mean and dividing by the standard deviation doesn't do much here.
